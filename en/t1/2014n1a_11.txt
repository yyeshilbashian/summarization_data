Software written in non-standard scripting languages ​​is now widely used.
 JavaScript programming language is widespread among such programming languages.
  With the increase in the efficiency of embedded computer systems, the use of the JavaScript language became possible not only in small scripts used on websites, but also in large web applications.
  Moreover, some operating systems use JavaScript as the primary programming language.
 Examples of such systems are Tizen [1] և FirefoxOS operating systems.
 As a result, there is a growing demand for scripting software.
This work considers the JavaScriptCore (JSC) JIT compiler for the JavaScript language, which is part of the WebKit library for displaying web pages.
  The aim of the work is to develop and implement optimizations in JavaScriptCore JIT compiler, which will lead to the generation of better quality code, which in turn will lead to increased productivity of programs written in JavaScript.
  The structure of the JavaScriptCore compiler [2] An electrical-syntactic analysis is performed at the beginning of the JavaScriptCore compiler.
  An abstract syntax tree is created based on the source code, which is then used to construct an intermediate representation (bytecode).
The work of the JavaScriptCore compiler is shown in Figure 1.
                                                  Figure 1 Depending on the intensity of the code execution, the source code is translated in 4 stages of machine code optimization.
In the first stage, the program is directly interpreted.
  During this phase, data is collected on the field values ​​of the Variable Types of Objects.
  In order for the translation of the function to pass to the second stage (Baseline JIT), it is necessary to add 100 "performance points" to the function, with each call of the function adding 15 points, and each step of the cycle adding 1 point.
In the second stage of translation, the function is dynamically compiled into machine code.
 The received machine code includes all possible execution options for each operation.
  For example, the arguments for the addition operation could be numbers or letters.
 In the second case, the operation must be performed as a connotation of lines.
  Thus, the resulting code can contain multiple branches to handle all such instances.
Data on types և objects collected in the first two stages are needed to organize a speculative translation in the third stage of translation.
The third translation phase (DFG JIT) is performed for functions that have accumulated more than 1000 "performance points".
  At this stage, various optimizations are performed, based on data on subtypes.
 The Bytecode intermediate representation builds a Data Flow Graph [3], in which operations are represented as SSA [3].
The DFG JIT compiler distributes the received information about the types in a data graph ավել adds the necessary type checks to the code.
If the result of the type test is negative, then the transition to the second stage of execution (OSR exit) is made, where the machine code includes all the cases of processing the types.
 Thus, the machine codes generated in the Baseline JIT և DFG JIT stages can replace each other.
  When the function scores enough "performance points", it switches to DFG JIT (OSR entry), and when a dynamic variable-type change occurs, it reverses the OSR exit.
 The fourth stage of translation is called LLVM JIT և is performed for essential functions that have collected more than 10,000 "performance units".
  The LLVM [4] compiler bitcode is used here instead of the intermediate code, ավելի more optimizations are performed, including most of the optimizations performed in the LLVM compiler.
Studies of the JavaScriptCore dynamic compiler architecture have shown that the physical registers in the DFG JIT compiler distribute locally within base blocks, causing all local variables in each base block to be copied back into memory.
  To get rid of redundant memory applications, a global registry distribution algorithm was developed in the JavaScriptCore JIT compiler.
  The Linear scan algorithm was chosen as the basis.
  This algorithm is implemented for SSA intermediate representation, which is the intermediate representation of the DFG JIT compiler.
 During the implementation of the algorithm, the following features of the JavaScriptCore compiler were taken into account: 1. The types of variables are determined dynamically; information about the types must be collected before distributing the registers.
2. For 32-bit architectures, the variable type և Value is stored in different registers.
3. Temporary registers are needed to translate some commands.
In JavaScriptCore Dynamic Compiler, the local distribution of registers was done during code generation.
 At this stage, all the data needed to translate the commands into the required number of registers տ variable types are available.
  The global registry distribution algorithm starts working before the coding stage, where this data is not available.
    To solve the problem, a new phase has been added to the compiler, which works immediately before the register distribution phase, collects the necessary data on the types of variables, and the required number of registers.
After the global distribution of registers, it became possible to remove memory-based applications in the input and output of base blocks, except when the base block is in the body of the loop.
  Execution of the program can pass from the baseline JIT compiler to the execution of the first command of the DFG JIT compiler cycle (OSR Entry) [2].
  In that case it is necessary to load the values ​​of all the necessary local variables into the physical registers.
  To solve the problem, a new block was added to the intermediate representation, where commands were placed to load the values ​​of the local variables into the physical registers.
  The DFG JIT compiler login address was then changed to indicate the login address of the newly built base unit as shown in Figure 2.
Figure 2 The number of variables used in the program may exceed the number of available physical registers.
  In that case, some variables need to be stored in memory.
  To minimize memory applications, the values ​​of frequently used variables should be stored in physical registers if possible.
  To this end, all program variables are matched to a "variable weight" that is directly proportional to the number of variables used in the program օգտագործման the cyclicity in which the variable is located.
Then the lighter variables are stored in memory, respectively, and the heavier ones in physical registers.
A study of the JavaScriptCore compiler revealed that there are commands that are not executed in the third level of optimization (DFG JIT), which is why there are cases when the function performed many times is not translated by the DFG JIT compiler.
 An example of such a command is the typeof command for determining the types of variables.
  The functions contained in this command were performed only in the first level of optimization (LLINT) և second level (baseline JIT).
    Another example of this type of command is for-in cycles, which are used to enumerate object member data.
 At the DFG JIT level, the translation of the two commands listed was performed, which increased the number of functions translated at the third level of optimization.
Studies have shown that the translation of some complex commands is done through C-language function calls, which takes a lot of time to prepare a stack, function arguments, and function calls.
 In order to improve the quality of the generated machine code, the function call in the machine code of some such commands has been replaced by a direct assembly code of the command.
The above optimization was done with JavaScript language for the following functions.
 Math.power, Math.flo օ r, Math.power, String.fromCharCode.
Within the framework of this work, several machine optimization methods were developed for the JavaScriptCore JIT compiler, as well as the global registry distribution algorithm was implemented.
All this has led to a significant improvement in the quality of the generated code.
 Translating new commands has increased the productivity of some tests in the SunSpider [6] test suite by 15%.
The global distribution of registries has improved the productivity of some tests by more than 20%.
